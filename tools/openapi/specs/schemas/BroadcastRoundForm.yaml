allOf:
  - oneOf:
      - type: object
        title: send games via push
        required:
          - name
        properties:
          name:
            $ref: "./BroadcastRoundFormName.yaml"
      - type: object
        title: retrieve games via PGN url
        required:
          - name
          - syncUrl
        properties:
          name:
            $ref: "./BroadcastRoundFormName.yaml"
          syncUrl:
            type: string
            format: uri
            description: |
              URL that Lichess will poll to get updates about the games. It must be publicly accessible from the Internet.

              Example:
              ```txt
              https://myserver.org/myevent/round-10/games.pgn
              ```
          onlyRound:
            type: integer
            maximum: 999
            minimum: 1
            description: |
              Filter games by round number

              Optional, only keep games from the source that match a round number.
              It uses the PGN **Round** tag. These would match round 3:
              ```txt
              [Round "3"]
              [Round "3.1"]
              ```
              If you set a round number, then games without a **Round** tag are dropped.

              It only works if you chose `syncUrl` or `syncUrls` as the source.
          slices:
            type: string
            description: |
              Select slices of the games

              Optional. Select games based on their position in the source.
              ```txt
              1           only select the first board
              1-4         only select the first 4 boards
              1,2,3,4     same as above, first 4 boards
              11-15,21-25 boards 11 to 15, and boards 21 to 25
              2,3,7-9     boards 2, 3, 7, 8, and 9
              ```
              Slicing is done after filtering by round number.

              It only works if you chose `syncUrl` or `syncUrls` as the source.
      - type: object
        title: retrieve games via mutiple PGN urls
        required:
          - name
          - syncUrls
        properties:
          name:
            $ref: "./BroadcastRoundFormName.yaml"
          syncUrls:
            type: string
            description: |
              URLs that Lichess will poll to get updates about the games, separated by newlines. They must be publicly accessible from the Internet.

              Example:
              ```txt
              https://myserver.org/myevent/round-10/game-1.pgn
              https://myserver.org/myevent/round-10/game-2.pgn
              ```
          onlyRound:
            type: integer
            maximum: 999
            minimum: 1
            description: |
              Filter games by round number

              Optional, only keep games from the source that match a round number.
              It uses the PGN **Round** tag. These would match round 3:
              ```txt
              [Round "3"]
              [Round "3.1"]
              ```
              If you set a round number, then games without a **Round** tag are dropped.

              It only works if you chose `syncUrl` or `syncUrls` as the source.
          slices:
            type: string
            description: |
              Select slices of the games

              Optional. Select games based on their position in the source.
              ```txt
              1           only select the first board
              1-4         only select the first 4 boards
              1,2,3,4     same as above, first 4 boards
              11-15,21-25 boards 11 to 15, and boards 21 to 25
              2,3,7-9     boards 2, 3, 7, 8, and 9
              ```
              Slicing is done after filtering by round number.

              It only works if you chose `syncUrl` or `syncUrls` as the source.
      - type: object
        title: retrieve games via Lichess game IDs
        required:
          - name
          - syncIds
        properties:
          name:
            $ref: "./BroadcastRoundFormName.yaml"
          syncIds:
            type: string
            description: |
              Lichess game IDs - Up to 100 Lichess game IDs, separated by spaces.
      - type: object
        title: retrieve games via Lichess usernames
        required:
          - name
          - syncUsers
        properties:
          name:
            $ref: "./BroadcastRoundFormName.yaml"
          syncUsers:
            type: string
            description: |
              Up to 100 Lichess usernames, separated by spaces

  - type: object
    properties:
      startsAt:
        type: integer
        format: int64
        description: |
          Timestamp in milliseconds of broadcast round start. Leave empty to manually start the broadcast round.
          Example: `1356998400070`
        minimum: 1356998400070
      startsAfterPrevious:
        type: boolean
        description: |
          The start date is unknown, and the round will start automatically when the previous round completes.
        default: false
      delay:
        type: integer
        description: |
          Delay in seconds for movements to appear on the broadcast. Leave it empty if you don't need it.
          Example: `900` (15 min)
        minimum: 0
        maximum: 3600
      status:
        type: string
        enum:
          - new
          - started
          - finished
        description: |
          Lichess can usually detect the round status, but you can also set it manually if needed.
        default: new
      rated:
        type: boolean
        default: true
        description: "Whether the round is used when calculating players' rating changes."
      customScoring.white.win:
        $ref: "./BroadcastCustomPoints.yaml#/properties/win"
      customScoring.white.draw:
        $ref: "./BroadcastCustomPoints.yaml#/properties/draw"
      customScoring.black.win:
        $ref: "./BroadcastCustomPoints.yaml#/properties/win"
      customScoring.black.draw:
        $ref: "./BroadcastCustomPoints.yaml#/properties/draw"
      period:
        type: integer
        description: |
          (Only for Admins) Waiting time for each poll.
        minimum: 2
        maximum: 60
